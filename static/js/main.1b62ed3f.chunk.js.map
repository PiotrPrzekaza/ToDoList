{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","splice","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b62ed3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n    minDate = new Date().toISOString().slice(0, 10)\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate,\r\n    }\r\n\r\n    handleText = e => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n    handleCheckbox = e => {\r\n        this.setState({\r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n    handleDate = e => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n    handleClick = () => {\r\n\r\n\r\n        const { text, checked, date } = this.state;\r\n        if (text.length > 2) {\r\n            const add = this.props.add(text, date, checked);\r\n            if (add) {\r\n                this.setState({\r\n                    text: '',\r\n                    checked: false,\r\n                    date: this.minDate\r\n                })\r\n            }\r\n        } else {\r\n            alert('Za krótka nazwa');\r\n        }\r\n    }\r\n    render() {\r\n\r\n        let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n        maxDate = maxDate + \"-12-31\"\r\n        return (\r\n            <div className=\"form\">\r\n                <input type=\"text\" placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handleText} />\r\n                <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox} />\r\n                <label htmlFor=\"important\">Priorytet</label>\r\n                <br />\r\n                <label htmlFor=\"date\">Do kiedy zrobić</label>\r\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n                <br />\r\n                <button onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n\r\n    const style = {\r\n        color: 'red',\r\n    }\r\n\r\n    const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n    if (active) {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span>\r\n                    <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n                </p>\r\n            </div>\r\n        );\r\n    } else {\r\n        const finish = new Date(finishDate).toLocaleString()\r\n        return (\r\n            <p>\r\n                <strong>{text}</strong> - <em> ( zrobić do {date})</em>\r\n                <br></br>\r\n                - potwierdzenie wykonania<span> {finish}</span>\r\n                <button onClick={() => props.delete(id)}>X</button>\r\n            </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const active = props.tasks.filter(task => task.active);\r\n    const done = props.tasks.filter(task => !task.active);\r\n\r\n    if (done.length >= 2) {\r\n        done.sort((a, b) => {\r\n            return b.finishDate - a.finishDate\r\n        })\r\n    }\r\n    // if (done.length >= 2) {\r\n    //     if (a.finishDate < b.finishDate) {\r\n    //         return 1\r\n    //     }\r\n    //     if (a.finishDate > b.finishDate) {\r\n    //         return -1\r\n    //     }\r\n    //     return 0\r\n    // }\r\n    if (active.length >= 2) {\r\n        active.sort((a, b) => {\r\n            a = a.text.toLowerCase();\r\n            b = b.text.toLowerCase();\r\n\r\n            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0\r\n        })\r\n    }\r\n\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    return (\r\n        <>\r\n            <div className=\"active\">\r\n                <h1>Zadania do zrobienia</h1>\r\n                {activeTasks.length > 0 ? activeTasks : <p>Brak zadań</p>}\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <div className=\"done\">\r\n                <h3>Zadania zrobione <em>({done.length})</em></h3>\r\n                {done.length > 5 && <span style={{ fontSize: 10 }}>wyświetlonych jest jedynie 5 ostatnio zrobionych zadań</span>}\r\n                {doneTasks.splice(0, 5)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\n\n\nclass App extends Component {\n\n\n  counter = 9;\n\n  state = {\n    tasks: [\n      { id: 0, text: \"zagrać wreszcie w Wiedźmina 3\", date: '2019-04-15', important: true, active: true, finishDate: null, },\n      { id: 1, text: \"zrobić dobry uczynej\", date: '2020-11-12', important: false, active: true, finishDate: null },\n      { id: 2, text: \"pomalować dom po sylwestrze\", date: '2019-09-11', important: false, active: true, finishDate: null },\n      { id: 3, text: \"schudnąć 30 kilogramów\", date: '2019-05-20', important: true, active: true, finishDate: null },\n      { id: 4, text: \"sprzedać butelki po piwie (20 skrzynek)\", date: '2020-11-12', important: false, active: true, finishDate: null },\n      { id: 5, text: \"jeszcze raz pomalować dom\", date: '2019-09-11', important: false, active: true, finishDate: null },\n      { id: 6, text: \"fryzjer!!!\", date: '2019-05-20', important: true, active: true, finishDate: null },\n      { id: 7, text: \"nie odbierać poleconego od komornika\", date: '2020-11-12', important: false, active: true, finishDate: null },\n      { id: 8, text: \"kupić 2 butelki litrowe\", date: '2019-09-11', important: false, active: true, finishDate: null },\n    ]\n  }\n\n  deleteTask = (id) => {\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n\n    // this.setState({\n    //   tasks\n    // })\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id)\n\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    }\n    this.counter++\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n\n    return true\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ToDo App</h1>\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}